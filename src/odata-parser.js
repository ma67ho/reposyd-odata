// Generated by Peggy 3.0.2.
//
// https://peggyjs.org/

"use strict";

function peg$subclass(child, parent) {
  function C() { this.constructor = child; }
  C.prototype = parent.prototype;
  child.prototype = new C();
}

function peg$SyntaxError(message, expected, found, location) {
  var self = Error.call(this, message);
  // istanbul ignore next Check is a necessary evil to support older environments
  if (Object.setPrototypeOf) {
    Object.setPrototypeOf(self, peg$SyntaxError.prototype);
  }
  self.expected = expected;
  self.found = found;
  self.location = location;
  self.name = "SyntaxError";
  return self;
}

peg$subclass(peg$SyntaxError, Error);

function peg$padEnd(str, targetLength, padString) {
  padString = padString || " ";
  if (str.length > targetLength) { return str; }
  targetLength -= str.length;
  padString += padString.repeat(targetLength);
  return str + padString.slice(0, targetLength);
}

peg$SyntaxError.prototype.format = function(sources) {
  var str = "Error: " + this.message;
  if (this.location) {
    var src = null;
    var k;
    for (k = 0; k < sources.length; k++) {
      if (sources[k].source === this.location.source) {
        src = sources[k].text.split(/\r\n|\n|\r/g);
        break;
      }
    }
    var s = this.location.start;
    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))
      ? this.location.source.offset(s)
      : s;
    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;
    if (src) {
      var e = this.location.end;
      var filler = peg$padEnd("", offset_s.line.toString().length, ' ');
      var line = src[s.line - 1];
      var last = s.line === e.line ? e.column : line.length + 1;
      var hatLen = (last - s.column) || 1;
      str += "\n --> " + loc + "\n"
          + filler + " |\n"
          + offset_s.line + " | " + line + "\n"
          + filler + " | " + peg$padEnd("", s.column - 1, ' ')
          + peg$padEnd("", hatLen, "^");
    } else {
      str += "\n at " + loc;
    }
  }
  return str;
};

peg$SyntaxError.buildMessage = function(expected, found) {
  var DESCRIBE_EXPECTATION_FNS = {
    literal: function(expectation) {
      return "\"" + literalEscape(expectation.text) + "\"";
    },

    class: function(expectation) {
      var escapedParts = expectation.parts.map(function(part) {
        return Array.isArray(part)
          ? classEscape(part[0]) + "-" + classEscape(part[1])
          : classEscape(part);
      });

      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";
    },

    any: function() {
      return "any character";
    },

    end: function() {
      return "end of input";
    },

    other: function(expectation) {
      return expectation.description;
    }
  };

  function hex(ch) {
    return ch.charCodeAt(0).toString(16).toUpperCase();
  }

  function literalEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/"/g,  "\\\"")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function classEscape(s) {
    return s
      .replace(/\\/g, "\\\\")
      .replace(/\]/g, "\\]")
      .replace(/\^/g, "\\^")
      .replace(/-/g,  "\\-")
      .replace(/\0/g, "\\0")
      .replace(/\t/g, "\\t")
      .replace(/\n/g, "\\n")
      .replace(/\r/g, "\\r")
      .replace(/[\x00-\x0F]/g,          function(ch) { return "\\x0" + hex(ch); })
      .replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return "\\x"  + hex(ch); });
  }

  function describeExpectation(expectation) {
    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
  }

  function describeExpected(expected) {
    var descriptions = expected.map(describeExpectation);
    var i, j;

    descriptions.sort();

    if (descriptions.length > 0) {
      for (i = 1, j = 1; i < descriptions.length; i++) {
        if (descriptions[i - 1] !== descriptions[i]) {
          descriptions[j] = descriptions[i];
          j++;
        }
      }
      descriptions.length = j;
    }

    switch (descriptions.length) {
      case 1:
        return descriptions[0];

      case 2:
        return descriptions[0] + " or " + descriptions[1];

      default:
        return descriptions.slice(0, -1).join(", ")
          + ", or "
          + descriptions[descriptions.length - 1];
    }
  }

  function describeFound(found) {
    return found ? "\"" + literalEscape(found) + "\"" : "end of input";
  }

  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
};

function peg$parse(input, options) {
  options = options !== undefined ? options : {};

  var peg$FAILED = {};
  var peg$source = options.grammarSource;

  var peg$startRuleFunctions = { start: peg$parsestart };
  var peg$startRuleFunction = peg$parsestart;

  var peg$c0 = "/";
  var peg$c1 = "%x27";
  var peg$c2 = "'";
  var peg$c3 = " ";
  var peg$c4 = "*";
  var peg$c5 = "''";
  var peg$c6 = ", ";
  var peg$c7 = ",";
  var peg$c8 = "(";
  var peg$c9 = ")";
  var peg$c10 = "%d88";
  var peg$c11 = "binary";
  var peg$c12 = "true";
  var peg$c13 = "1";
  var peg$c14 = "false";
  var peg$c15 = "0";
  var peg$c16 = "datetime";
  var peg$c17 = "datetimeoffset";
  var peg$c18 = "-";
  var peg$c19 = "T";
  var peg$c20 = ":";
  var peg$c21 = ".";
  var peg$c22 = "Z";
  var peg$c23 = ":00";
  var peg$c24 = "M";
  var peg$c25 = "m";
  var peg$c26 = "e";
  var peg$c27 = "E";
  var peg$c28 = "D";
  var peg$c29 = "d";
  var peg$c30 = "guid";
  var peg$c31 = "L";
  var peg$c32 = "l";
  var peg$c33 = "+";
  var peg$c34 = "NaN";
  var peg$c35 = "-INF";
  var peg$c36 = "INF";
  var peg$c37 = "null";
  var peg$c38 = "F";
  var peg$c39 = "f";
  var peg$c40 = "13";
  var peg$c41 = "60";
  var peg$c42 = "3";
  var peg$c43 = "2";
  var peg$c44 = "eq";
  var peg$c45 = "ne";
  var peg$c46 = "lt";
  var peg$c47 = "le";
  var peg$c48 = "gt";
  var peg$c49 = "ge";
  var peg$c50 = "add";
  var peg$c51 = "sub";
  var peg$c52 = "mul";
  var peg$c53 = "div";
  var peg$c54 = "mod";
  var peg$c55 = "in";
  var peg$c56 = "not";
  var peg$c57 = "$count";
  var peg$c58 = "and";
  var peg$c59 = "or";
  var peg$c60 = "day";
  var peg$c61 = "fractionalseconds";
  var peg$c62 = "hour";
  var peg$c63 = "minute";
  var peg$c64 = "month";
  var peg$c65 = "now";
  var peg$c66 = "second";
  var peg$c67 = "year";
  var peg$c68 = "ceiling";
  var peg$c69 = "floor";
  var peg$c70 = "round";
  var peg$c71 = "substring";
  var peg$c72 = "tolower";
  var peg$c73 = "toupper";
  var peg$c74 = "()";
  var peg$c75 = "length";
  var peg$c76 = "trim";
  var peg$c77 = "concat";
  var peg$c78 = "contains";
  var peg$c79 = "endswith";
  var peg$c80 = "indexof";
  var peg$c81 = "startswith";
  var peg$c82 = "substring(";
  var peg$c83 = "all";
  var peg$c84 = "any";
  var peg$c85 = "/$count";
  var peg$c86 = "$filter=";
  var peg$c87 = "($filter=";
  var peg$c88 = ";";
  var peg$c89 = "$expand=";
  var peg$c90 = "asc";
  var peg$c91 = "desc";
  var peg$c92 = "$orderby=";
  var peg$c93 = "$format=";
  var peg$c94 = "$select=";
  var peg$c95 = "$skip=";
  var peg$c96 = "$skip";
  var peg$c97 = "$top=";
  var peg$c98 = "$";
  var peg$c99 = "&";
  var peg$c100 = "=";

  var peg$r0 = /^[0-9]/;
  var peg$r1 = /^[0-9a-fA-F]/;
  var peg$r2 = /^[a-zA-Z0-9\-_]/;
  var peg$r3 = /^[^']/;
  var peg$r4 = /^[1-9]/;
  var peg$r5 = /^[0-2]/;
  var peg$r6 = /^[0-5]/;
  var peg$r7 = /^[0-1]/;
  var peg$r8 = /^[0-4]/;
  var peg$r9 = /^[a-zA-Z]/;
  var peg$r10 = /^[a-z]/;
  var peg$r11 = /^[a-zA-Z0-9\-_.+! *%'(),\/\\=#&]/;
  var peg$r12 = /^[a-z0-9\-_.+! *%'(),]/;

  var peg$e0 = peg$classExpectation([["0", "9"]], false, false);
  var peg$e1 = peg$classExpectation([["0", "9"], ["a", "f"], ["A", "F"]], false, false);
  var peg$e2 = peg$literalExpectation("/", false);
  var peg$e3 = peg$literalExpectation("%x27", false);
  var peg$e4 = peg$literalExpectation("'", false);
  var peg$e5 = peg$literalExpectation(" ", false);
  var peg$e6 = peg$literalExpectation("*", false);
  var peg$e7 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_"], false, false);
  var peg$e8 = peg$classExpectation(["'"], true, false);
  var peg$e9 = peg$literalExpectation("''", false);
  var peg$e10 = peg$literalExpectation(", ", false);
  var peg$e11 = peg$literalExpectation(",", false);
  var peg$e12 = peg$literalExpectation("(", false);
  var peg$e13 = peg$literalExpectation(")", false);
  var peg$e14 = peg$literalExpectation("%d88", false);
  var peg$e15 = peg$literalExpectation("binary", false);
  var peg$e16 = peg$literalExpectation("true", false);
  var peg$e17 = peg$literalExpectation("1", false);
  var peg$e18 = peg$literalExpectation("false", false);
  var peg$e19 = peg$literalExpectation("0", false);
  var peg$e20 = peg$literalExpectation("datetime", false);
  var peg$e21 = peg$literalExpectation("datetimeoffset", false);
  var peg$e22 = peg$literalExpectation("-", false);
  var peg$e23 = peg$literalExpectation("T", false);
  var peg$e24 = peg$literalExpectation(":", false);
  var peg$e25 = peg$literalExpectation(".", false);
  var peg$e26 = peg$literalExpectation("Z", false);
  var peg$e27 = peg$literalExpectation(":00", false);
  var peg$e28 = peg$literalExpectation("M", false);
  var peg$e29 = peg$literalExpectation("m", false);
  var peg$e30 = peg$literalExpectation("e", false);
  var peg$e31 = peg$literalExpectation("E", false);
  var peg$e32 = peg$literalExpectation("D", false);
  var peg$e33 = peg$literalExpectation("d", false);
  var peg$e34 = peg$literalExpectation("guid", false);
  var peg$e35 = peg$literalExpectation("L", false);
  var peg$e36 = peg$literalExpectation("l", false);
  var peg$e37 = peg$literalExpectation("+", false);
  var peg$e38 = peg$literalExpectation("NaN", false);
  var peg$e39 = peg$literalExpectation("-INF", false);
  var peg$e40 = peg$literalExpectation("INF", false);
  var peg$e41 = peg$literalExpectation("null", false);
  var peg$e42 = peg$literalExpectation("F", false);
  var peg$e43 = peg$literalExpectation("f", false);
  var peg$e44 = peg$classExpectation([["1", "9"]], false, false);
  var peg$e45 = peg$classExpectation([["0", "2"]], false, false);
  var peg$e46 = peg$literalExpectation("13", false);
  var peg$e47 = peg$literalExpectation("60", false);
  var peg$e48 = peg$classExpectation([["0", "5"]], false, false);
  var peg$e49 = peg$literalExpectation("3", false);
  var peg$e50 = peg$classExpectation([["0", "1"]], false, false);
  var peg$e51 = peg$literalExpectation("2", false);
  var peg$e52 = peg$classExpectation([["0", "4"]], false, false);
  var peg$e53 = peg$literalExpectation("eq", false);
  var peg$e54 = peg$literalExpectation("ne", false);
  var peg$e55 = peg$literalExpectation("lt", false);
  var peg$e56 = peg$literalExpectation("le", false);
  var peg$e57 = peg$literalExpectation("gt", false);
  var peg$e58 = peg$literalExpectation("ge", false);
  var peg$e59 = peg$literalExpectation("add", false);
  var peg$e60 = peg$literalExpectation("sub", false);
  var peg$e61 = peg$literalExpectation("mul", false);
  var peg$e62 = peg$literalExpectation("div", false);
  var peg$e63 = peg$literalExpectation("mod", false);
  var peg$e64 = peg$literalExpectation("in", false);
  var peg$e65 = peg$literalExpectation("not", false);
  var peg$e66 = peg$classExpectation([["a", "z"], ["A", "Z"]], false, false);
  var peg$e67 = peg$literalExpectation("$count", false);
  var peg$e68 = peg$literalExpectation("and", false);
  var peg$e69 = peg$literalExpectation("or", false);
  var peg$e70 = peg$literalExpectation("day", false);
  var peg$e71 = peg$literalExpectation("fractionalseconds", false);
  var peg$e72 = peg$literalExpectation("hour", false);
  var peg$e73 = peg$literalExpectation("minute", false);
  var peg$e74 = peg$literalExpectation("month", false);
  var peg$e75 = peg$literalExpectation("now", false);
  var peg$e76 = peg$literalExpectation("second", false);
  var peg$e77 = peg$literalExpectation("year", false);
  var peg$e78 = peg$literalExpectation("ceiling", false);
  var peg$e79 = peg$literalExpectation("floor", false);
  var peg$e80 = peg$literalExpectation("round", false);
  var peg$e81 = peg$literalExpectation("substring", false);
  var peg$e82 = peg$literalExpectation("tolower", false);
  var peg$e83 = peg$literalExpectation("toupper", false);
  var peg$e84 = peg$literalExpectation("()", false);
  var peg$e85 = peg$literalExpectation("length", false);
  var peg$e86 = peg$literalExpectation("trim", false);
  var peg$e87 = peg$literalExpectation("concat", false);
  var peg$e88 = peg$literalExpectation("contains", false);
  var peg$e89 = peg$literalExpectation("endswith", false);
  var peg$e90 = peg$literalExpectation("indexof", false);
  var peg$e91 = peg$literalExpectation("startswith", false);
  var peg$e92 = peg$literalExpectation("substring(", false);
  var peg$e93 = peg$classExpectation([["a", "z"]], false, false);
  var peg$e94 = peg$literalExpectation("all", false);
  var peg$e95 = peg$literalExpectation("any", false);
  var peg$e96 = peg$literalExpectation("/$count", false);
  var peg$e97 = peg$literalExpectation("$filter=", false);
  var peg$e98 = peg$literalExpectation("($filter=", false);
  var peg$e99 = peg$literalExpectation(";", false);
  var peg$e100 = peg$literalExpectation("$expand=", false);
  var peg$e101 = peg$literalExpectation("asc", false);
  var peg$e102 = peg$literalExpectation("desc", false);
  var peg$e103 = peg$literalExpectation("$orderby=", false);
  var peg$e104 = peg$classExpectation([["a", "z"], ["A", "Z"], ["0", "9"], "-", "_", ".", "+", "!", " ", "*", "%", "'", "(", ")", ",", "/", "\\", "=", "#", "&"], false, false);
  var peg$e105 = peg$literalExpectation("$format=", false);
  var peg$e106 = peg$literalExpectation("$select=", false);
  var peg$e107 = peg$literalExpectation("$skip=", false);
  var peg$e108 = peg$literalExpectation("$skip", false);
  var peg$e109 = peg$anyExpectation();
  var peg$e110 = peg$literalExpectation("$top=", false);
  var peg$e111 = peg$literalExpectation("$", false);
  var peg$e112 = peg$literalExpectation("&", false);
  var peg$e113 = peg$classExpectation([["a", "z"], ["0", "9"], "-", "_", ".", "+", "!", " ", "*", "%", "'", "(", ")", ","], false, false);
  var peg$e114 = peg$literalExpectation("=", false);

  var peg$f0 = function(a) { return a.join(''); };
  var peg$f1 = function(a) { return a.join(''); };
  var peg$f2 = function(a) { return a.join('').replace(/('')/g, "'"); };
  var peg$f3 = function(a) { return a; };
  var peg$f4 = function(a, b) {
                                return [a].concat(b.map(f => f[1]))
                              };
  var peg$f5 = function() { return true; };
  var peg$f6 = function() { return true; };
  var peg$f7 = function() { return false; };
  var peg$f8 = function() { return false; };
  var peg$f9 = function(a) { return new Date(a); };
  var peg$f10 = function(a) { return new Date(a); };
  var peg$f11 = function(a, b, c, d, e) {
                                    return a + '-' + b + '-' + c + "T" + d + ":" + e;
                                };
  var peg$f12 = function(a, b) { return a + ":" + b; };
  var peg$f13 = function(a, b) { return a + "." + b; };
  var peg$f14 = function(a, b, c) {
                                    return a + "-" + b + ":" + c;
                                };
  var peg$f15 = function(a) { return a + "Z"; };
  var peg$f16 = function(a, b, c) { return a + b + c + ":00"; };
  var peg$f17 = function(a, b, c) { return a + b + c; };
  var peg$f18 = function(a, b, c, d) { return a + b + c + ":" + d; };
  var peg$f19 = function(a, b, c) { return a + b + c; };
  var peg$f20 = function(sign, digit, decimal) { return (sign || '') + digit.join('') + '.' + decimal.join(''); };
  var peg$f21 = function(sign, digit) { return sign + digit.join(''); };
  var peg$f22 = function(sign, digit, decimal, signexp, exp) { return (sign || '') + digit + '.' + decimal.join('') + 'e' + (signexp || '') + exp.join(''); };
  var peg$f23 = function(sign, digit, decimal) { return sign + digit.join('') + '.' + decimal.join(''); };
  var peg$f24 = function(sign, digit) { return (sign || '') + digit.join(''); };
  var peg$f25 = function(sign, digit) { return parseInt(digit.join('')) * (sign === '-' ? -1 : 1); };
  var peg$f26 = function(l, v, r) { return v; };
  var peg$f27 = function(a, b) { return a + b;};
  var peg$f28 = function(a, b) { return a + b; };
  var peg$f29 = function(a, b) { return a + b; };
  var peg$f30 = function(a) { return "3" + a; };
  var peg$f31 = function(a, b) { return a + b; };
  var peg$f32 = function(a) { return "2" + a; };
  var peg$f33 = function(a, b) { return a + b; };
  var peg$f34 = function(a, b, c, d) { return a + b + c + d; };
  var peg$f35 = function(a) { return a.join('')  };
  var peg$f36 = function(a) { return a.join('')  };
  var peg$f37 = function(l) { return l.join('/') };
  var peg$f38 = function(a, b) {
									return [a].concat(b.map(f => f[1]))
                        		};
  var peg$f39 = function(a, b) {
									return [a].concat(b.map(f => f[1]))
                        		};
  var peg$f40 = function(s) { return { type: 'literal', value: s } };
  var peg$f41 = function(a) { return { type: 'literal', value: a }};
  var peg$f42 = function(a) { return { type: 'literal', value: a } };
  var peg$f43 = function(a) { return { type: 'literal', value: a } };
  var peg$f44 = function(a) { return { name: a, type: 'property' } };
  var peg$f45 = function(a) { return { type: 'literal', value: a } };
  var peg$f46 = function(f) {
									return { args: [], func: f, type: "functioncall" }
                                };
  var peg$f47 = function(f, arg0) {
								return { args: [arg0], func: f, type: "functioncall" }
							};
  var peg$f48 = function(f, arg0, arg1) {
									return { args: [arg0,arg1], func: f, type: "functioncall" }
								};
  var peg$f49 = function(arg0, arg1, arg2) {
									return { args: [arg0,arg1,arg2], func: 'substring',  type: "functioncall" }
								};
  var peg$f50 = function(v) { return v };
  var peg$f51 = function(l, o, r) {
									return { left: l, right: r, type: o}
                                };
  var peg$f52 = function(l, o, r) {
									return { left: l, right: r, type: o}
                                };
  var peg$f53 = function(l, e) { return { expression: e, match: l } };
  var peg$f54 = function(a) { return a.join('')  };
  var peg$f55 = function(l) { return l.join('/') };
  var peg$f56 = function(p, l) { return { path: p, lambda: l, type: 'lambda' } };
  var peg$f57 = function(l, o, r) {
									return { left: conditionLeft(l), right: literal(r), type: o }
								};
  var peg$f58 = function(p, o, l) { 
									return { 
                                    	count: { 
                                    		left: { name: p.join('/'), type: 'property' },
                                        	right: l,
                                            type: o
                                        },
                                        type: 'count'
                                	}
                                };
  var peg$f59 = function(l, o, n, r) {
                                	return {left: l, right: r, negate: n || false,type: o }
                                };
  var peg$f60 = function(l, o, n, r) {
                                	return {left: l, right: r, negate: n ? true : false, type: o }
                                };
  var peg$f61 = function(l, o, r) {
									return { left: l, right: r, type: o}
                                };
  var peg$f62 = function(f) { return [ '$filter', f ] };
  var peg$f63 = function(p) { return { expand: p.join('/') } };
  var peg$f64 = function(p, e) {
									return { expand: p.join('/'), $filter: e}
								};
  var peg$f65 = function(p) { return p.join('/') };
  var peg$f66 = function(p) { return { options: {}, property: p } };
  var peg$f67 = function(p, o) { 
									return { options: o, property: p }
                             	   };
  var peg$f68 = function(f) { return { "$filter": f[1] } };
  var peg$f69 = function(o) {return { "$expand": o[1] }};
  var peg$f70 = function(a, b) {
                               		return [a].concat(b.map(f => f[1]))
                                	};
  var peg$f71 = function(o) { return ["$expand", o] };
  var peg$f72 = function(p, o) {
									return { dir: o ? o[1] : 'asc' , property: p  }
								};
  var peg$f73 = function(l) {
								return ["$orderby", l]
                                };
  var peg$f74 = function() { return ["$count", true ] };
  var peg$f75 = function(o) { return o.join('') };
  var peg$f76 = function(a, b) {
									return [a].concat(b.map(f => f[1]))
                                };
  var peg$f77 = function(l) { return ["$format", l] };
  var peg$f78 = function(p) {
								return ["$select", p]
                                };
  var peg$f79 = function(a) { return ['$skip', ~~a ]; };
  var peg$f80 = function() { return {"error": 'invalid $skip parameter'}; };
  var peg$f81 = function(a) { return ['$top', ~~a ]; };
  var peg$f82 = function() { return ['error', 'invalid $top parameter'] };
  var peg$f83 = function(er) { return [ 'error', "unsupported method: " + er.join(er) ] };
  var peg$f84 = function(k, v) { 
                                    const o = {}
                                    o[k.join('')] = v.join('')
                                    //return o
                                    return [k.join(''), v.join('')]
                                };
  var peg$f85 = function(a, v) { return v };
  var peg$f86 = function(a, b) {
									const o = {}
                                    o[a[0]] = a[1]
                                    for(let i in b){
                                    	o[b[i][0]] = b[i][1]
                                    }
									return o
                              	};
  var peg$f87 = function(c) { return [ "custom", c]};
  var peg$f88 = function(e, el) { return [e].concat(el); };
  var peg$f89 = function(e) { return [e]; };
  var peg$f90 = function(k) { return k };
  var peg$f91 = function(k) {
									const o = {}
    	                            for(let i in k){
        	                        		o[k[i][0]] = k[i][1]
            	                    }
									return o
                    	        };
  var peg$currPos = 0;
  var peg$savedPos = 0;
  var peg$posDetailsCache = [{ line: 1, column: 1 }];
  var peg$maxFailPos = 0;
  var peg$maxFailExpected = [];
  var peg$silentFails = 0;

  var peg$result;

  if ("startRule" in options) {
    if (!(options.startRule in peg$startRuleFunctions)) {
      throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
    }

    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
  }

  function text() {
    return input.substring(peg$savedPos, peg$currPos);
  }

  function offset() {
    return peg$savedPos;
  }

  function range() {
    return {
      source: peg$source,
      start: peg$savedPos,
      end: peg$currPos
    };
  }

  function location() {
    return peg$computeLocation(peg$savedPos, peg$currPos);
  }

  function expected(description, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildStructuredError(
      [peg$otherExpectation(description)],
      input.substring(peg$savedPos, peg$currPos),
      location
    );
  }

  function error(message, location) {
    location = location !== undefined
      ? location
      : peg$computeLocation(peg$savedPos, peg$currPos);

    throw peg$buildSimpleError(message, location);
  }

  function peg$literalExpectation(text, ignoreCase) {
    return { type: "literal", text: text, ignoreCase: ignoreCase };
  }

  function peg$classExpectation(parts, inverted, ignoreCase) {
    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
  }

  function peg$anyExpectation() {
    return { type: "any" };
  }

  function peg$endExpectation() {
    return { type: "end" };
  }

  function peg$otherExpectation(description) {
    return { type: "other", description: description };
  }

  function peg$computePosDetails(pos) {
    var details = peg$posDetailsCache[pos];
    var p;

    if (details) {
      return details;
    } else {
      p = pos - 1;
      while (!peg$posDetailsCache[p]) {
        p--;
      }

      details = peg$posDetailsCache[p];
      details = {
        line: details.line,
        column: details.column
      };

      while (p < pos) {
        if (input.charCodeAt(p) === 10) {
          details.line++;
          details.column = 1;
        } else {
          details.column++;
        }

        p++;
      }

      peg$posDetailsCache[pos] = details;

      return details;
    }
  }

  function peg$computeLocation(startPos, endPos, offset) {
    var startPosDetails = peg$computePosDetails(startPos);
    var endPosDetails = peg$computePosDetails(endPos);

    var res = {
      source: peg$source,
      start: {
        offset: startPos,
        line: startPosDetails.line,
        column: startPosDetails.column
      },
      end: {
        offset: endPos,
        line: endPosDetails.line,
        column: endPosDetails.column
      }
    };
    if (offset && peg$source && (typeof peg$source.offset === "function")) {
      res.start = peg$source.offset(res.start);
      res.end = peg$source.offset(res.end);
    }
    return res;
  }

  function peg$fail(expected) {
    if (peg$currPos < peg$maxFailPos) { return; }

    if (peg$currPos > peg$maxFailPos) {
      peg$maxFailPos = peg$currPos;
      peg$maxFailExpected = [];
    }

    peg$maxFailExpected.push(expected);
  }

  function peg$buildSimpleError(message, location) {
    return new peg$SyntaxError(message, null, null, location);
  }

  function peg$buildStructuredError(expected, found, location) {
    return new peg$SyntaxError(
      peg$SyntaxError.buildMessage(expected, found),
      expected,
      found,
      location
    );
  }

  function peg$parsestart() {
    var s0;

    s0 = peg$parsequery();

    return s0;
  }

  function peg$parseDIGIT() {
    var s0;

    if (peg$r0.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e0); }
    }

    return s0;
  }

  function peg$parseINT() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        s2 = peg$parseDIGIT();
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f0(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseHEXDIG() {
    var s0;

    if (peg$r1.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e1); }
    }

    return s0;
  }

  function peg$parseHEXDIG2() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHEXDIG();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHEXDIG();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIG4() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHEXDIG2();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHEXDIG2();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseHEXDIG8() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parseHEXDIG4();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseHEXDIG8();
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsePATHSEPARATOR() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 47) {
      s0 = peg$c0;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e2); }
    }

    return s0;
  }

  function peg$parseSQUOTE() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c1) {
      s0 = peg$c1;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e3); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 39) {
        s0 = peg$c2;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e4); }
      }
    }

    return s0;
  }

  function peg$parseWHITESPACE() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 32) {
      s0 = peg$c3;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e5); }
    }

    return s0;
  }

  function peg$parseWILDCARD() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 42) {
      s0 = peg$c4;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e6); }
    }

    return s0;
  }

  function peg$parseunreserved() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r2.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e7); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r2.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e7); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f1(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsevalidstring() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r3.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e8); }
    }
    if (s2 === peg$FAILED) {
      s2 = peg$parseescapedQuote();
    }
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      if (peg$r3.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e8); }
      }
      if (s2 === peg$FAILED) {
        s2 = peg$parseescapedQuote();
      }
    }
    peg$savedPos = s0;
    s1 = peg$f2(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseescapedQuote() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c5) {
      s1 = peg$c5;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e9); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f3(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsearrayValue() {
    var s0;

    s0 = peg$parseint32();
    if (s0 === peg$FAILED) {
      s0 = peg$parseguid();
      if (s0 === peg$FAILED) {
        s0 = peg$parsestring();
      }
    }

    return s0;
  }

  function peg$parsearraySeparator() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c6) {
      s0 = peg$c6;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e10); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 44) {
        s0 = peg$c7;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e11); }
      }
    }

    return s0;
  }

  function peg$parsearray() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsearrayValue();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$currPos;
        s5 = peg$parsearraySeparator();
        if (s5 !== peg$FAILED) {
          s6 = peg$parsearrayValue();
          if (s6 !== peg$FAILED) {
            s5 = [s5, s6];
            s4 = s5;
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        } else {
          peg$currPos = s4;
          s4 = peg$FAILED;
        }
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$currPos;
          s5 = peg$parsearraySeparator();
          if (s5 !== peg$FAILED) {
            s6 = peg$parsearrayValue();
            if (s6 !== peg$FAILED) {
              s5 = [s5, s6];
              s4 = s5;
            } else {
              peg$currPos = s4;
              s4 = peg$FAILED;
            }
          } else {
            peg$currPos = s4;
            s4 = peg$FAILED;
          }
        }
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f4(s2, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsebinary() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c10) {
      s1 = peg$c10;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e14); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 6) === peg$c11) {
        s1 = peg$c11;
        peg$currPos += 6;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e15); }
      }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSQUOTE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHEXDIG();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseHEXDIG();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseSQUOTE();
            if (s5 !== peg$FAILED) {
              s1 = [s1, s2, s3, s4, s5];
              s0 = s1;
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseboolean() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c12) {
      s1 = peg$c12;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e16); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f5();
    }
    s0 = s1;
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 49) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f6();
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c14) {
          s1 = peg$c14;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e18); }
        }
        if (s1 !== peg$FAILED) {
          peg$savedPos = s0;
          s1 = peg$f7();
        }
        s0 = s1;
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 48) {
            s1 = peg$c15;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e19); }
          }
          if (s1 !== peg$FAILED) {
            peg$savedPos = s0;
            s1 = peg$f8();
          }
          s0 = s1;
        }
      }
    }

    return s0;
  }

  function peg$parsebyte() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseDIGIT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTime() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c16) {
      s1 = peg$c16;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e20); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSQUOTE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedateTimeBody();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSQUOTE();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f9(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeOffset() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 14) === peg$c17) {
      s1 = peg$c17;
      peg$currPos += 14;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e21); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSQUOTE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsedateTimeOffsetBody();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseSQUOTE();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f10(s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeBodyA() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$parseyear();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c18;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsezeroToTwelve();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s4 = peg$c18;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsezeroToThirtyOne();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 84) {
                s6 = peg$c19;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e23); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parsezeroToTwentyFour();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 58) {
                    s8 = peg$c20;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e24); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parsezeroToSixty();
                    if (s9 !== peg$FAILED) {
                      peg$savedPos = s0;
                      s0 = peg$f11(s1, s3, s5, s7, s9);
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeBodyB() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedateTimeBodyA();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 58) {
        s2 = peg$c20;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e24); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsezeroToSixty();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f12(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeBodyC() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsedateTimeBodyB();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s2 = peg$c21;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseINT();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f13(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeBodyD() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsedateTimeBodyC();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s2 = peg$c18;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsezeroToTwentyFour();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 58) {
            s4 = peg$c20;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e24); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parsezeroToSixty();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f14(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsedateTimeBody() {
    var s0;

    s0 = peg$parsedateTimeBodyD();
    if (s0 === peg$FAILED) {
      s0 = peg$parsedateTimeBodyC();
      if (s0 === peg$FAILED) {
        s0 = peg$parsedateTimeBodyB();
        if (s0 === peg$FAILED) {
          s0 = peg$parsedateTimeBodyA();
        }
      }
    }

    return s0;
  }

  function peg$parsedateTimeOffsetBody() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsedateTimeBody();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 90) {
        s2 = peg$c22;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e26); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f15(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsedateTimeBody();
      if (s1 !== peg$FAILED) {
        s2 = peg$parsesign();
        if (s2 !== peg$FAILED) {
          s3 = peg$parsezeroToThirteen();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c23) {
              s4 = peg$c23;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e27); }
            }
            if (s4 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f16(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsedateTimeBody();
        if (s1 !== peg$FAILED) {
          s2 = peg$parsesign();
          if (s2 !== peg$FAILED) {
            s3 = peg$parsezeroToThirteen();
            if (s3 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f17(s1, s2, s3);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsedateTimeBody();
          if (s1 !== peg$FAILED) {
            s2 = peg$parsesign();
            if (s2 !== peg$FAILED) {
              s3 = peg$parsezeroToTwelve();
              if (s3 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 58) {
                  s4 = peg$c20;
                  peg$currPos++;
                } else {
                  s4 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e24); }
                }
                if (s4 !== peg$FAILED) {
                  s5 = peg$parsezeroToSixty();
                  if (s5 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f18(s1, s2, s3, s5);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
          if (s0 === peg$FAILED) {
            s0 = peg$currPos;
            s1 = peg$parsedateTimeBody();
            if (s1 !== peg$FAILED) {
              s2 = peg$parsesign();
              if (s2 !== peg$FAILED) {
                s3 = peg$parsezeroToTwelve();
                if (s3 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f19(s1, s2, s3);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedecimal() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsesign();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$parseDIGIT();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDIGIT();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseDIGIT();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseDIGIT();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 77) {
            s5 = peg$c24;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e28); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 109) {
              s5 = peg$c25;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e29); }
            }
          }
          if (s5 === peg$FAILED) {
            s5 = null;
          }
          peg$savedPos = s0;
          s0 = peg$f20(s1, s2, s4);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesign();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 77) {
          s3 = peg$c24;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e28); }
        }
        if (s3 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 109) {
            s3 = peg$c25;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e29); }
          }
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f21(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsedouble() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    s1 = peg$parsesign();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 46) {
        s3 = peg$c21;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e25); }
      }
      if (s3 !== peg$FAILED) {
        s4 = [];
        s5 = peg$parseDIGIT();
        if (s5 !== peg$FAILED) {
          while (s5 !== peg$FAILED) {
            s4.push(s5);
            s5 = peg$parseDIGIT();
          }
        } else {
          s4 = peg$FAILED;
        }
        if (s4 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 101) {
            s5 = peg$c26;
            peg$currPos++;
          } else {
            s5 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e30); }
          }
          if (s5 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 69) {
              s5 = peg$c27;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e31); }
            }
          }
          if (s5 !== peg$FAILED) {
            s6 = peg$parsesign();
            if (s6 === peg$FAILED) {
              s6 = null;
            }
            s7 = [];
            s8 = peg$parseDIGIT();
            if (s8 !== peg$FAILED) {
              while (s8 !== peg$FAILED) {
                s7.push(s8);
                s8 = peg$parseDIGIT();
              }
            } else {
              s7 = peg$FAILED;
            }
            if (s7 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 68) {
                s8 = peg$c28;
                peg$currPos++;
              } else {
                s8 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e32); }
              }
              if (s8 === peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 100) {
                  s8 = peg$c29;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e33); }
                }
              }
              if (s8 === peg$FAILED) {
                s8 = null;
              }
              peg$savedPos = s0;
              s0 = peg$f22(s1, s2, s4, s6, s7);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsesign();
      if (s1 === peg$FAILED) {
        s1 = null;
      }
      s2 = [];
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          s3 = peg$parseDIGIT();
        }
      } else {
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s3 = peg$c21;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s3 !== peg$FAILED) {
          s4 = [];
          s5 = peg$parseDIGIT();
          if (s5 !== peg$FAILED) {
            while (s5 !== peg$FAILED) {
              s4.push(s5);
              s5 = peg$parseDIGIT();
            }
          } else {
            s4 = peg$FAILED;
          }
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 68) {
              s5 = peg$c28;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s5 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 100) {
                s5 = peg$c29;
                peg$currPos++;
              } else {
                s5 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f23(s1, s2, s4);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        s1 = peg$parsesign();
        if (s1 === peg$FAILED) {
          s1 = null;
        }
        s2 = [];
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          while (s3 !== peg$FAILED) {
            s2.push(s3);
            s3 = peg$parseDIGIT();
          }
        } else {
          s2 = peg$FAILED;
        }
        if (s2 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 68) {
            s3 = peg$c28;
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e32); }
          }
          if (s3 === peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 100) {
              s3 = peg$c29;
              peg$currPos++;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e33); }
            }
          }
          if (s3 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f24(s1, s2);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          s1 = peg$parsenanInfinity();
          if (s1 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 68) {
              s2 = peg$c28;
              peg$currPos++;
            } else {
              s2 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e32); }
            }
            if (s2 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 100) {
                s2 = peg$c29;
                peg$currPos++;
              } else {
                s2 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e33); }
              }
            }
            if (s2 === peg$FAILED) {
              s2 = null;
            }
            s1 = [s1, s2];
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        }
      }
    }

    return s0;
  }

  function peg$parseguid() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 4) === peg$c30) {
      s1 = peg$c30;
      peg$currPos += 4;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e34); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseSQUOTE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseHEXDIG8();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 45) {
            s4 = peg$c18;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e22); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseHEXDIG4();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 45) {
                s6 = peg$c18;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e22); }
              }
              if (s6 !== peg$FAILED) {
                s7 = peg$parseHEXDIG4();
                if (s7 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 45) {
                    s8 = peg$c18;
                    peg$currPos++;
                  } else {
                    s8 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e22); }
                  }
                  if (s8 !== peg$FAILED) {
                    s9 = peg$parseHEXDIG8();
                    if (s9 !== peg$FAILED) {
                      s10 = peg$parseHEXDIG4();
                      if (s10 !== peg$FAILED) {
                        s11 = peg$parseSQUOTE();
                        if (s11 !== peg$FAILED) {
                          s1 = [s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11];
                          s0 = s1;
                        } else {
                          peg$currPos = s0;
                          s0 = peg$FAILED;
                        }
                      } else {
                        peg$currPos = s0;
                        s0 = peg$FAILED;
                      }
                    } else {
                      peg$currPos = s0;
                      s0 = peg$FAILED;
                    }
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseint32() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesign();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$parseDIGIT();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDIGIT();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      peg$savedPos = s0;
      s0 = peg$f25(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseint64() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsesign();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = [];
    s3 = peg$parseDIGIT();
    if (s3 !== peg$FAILED) {
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$parseDIGIT();
      }
    } else {
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 76) {
        s3 = peg$c31;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e35); }
      }
      if (s3 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 108) {
          s3 = peg$c32;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e36); }
        }
      }
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s1 = [s1, s2, s3];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesign() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 43) {
      s0 = peg$c33;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e37); }
    }
    if (s0 === peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 45) {
        s0 = peg$c18;
        peg$currPos++;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e22); }
      }
    }

    return s0;
  }

  function peg$parsenan() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c34) {
      s0 = peg$c34;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e38); }
    }

    return s0;
  }

  function peg$parsenegativeInfinity() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c35) {
      s0 = peg$c35;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e39); }
    }

    return s0;
  }

  function peg$parsepositiveInfinity() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c36) {
      s0 = peg$c36;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e40); }
    }

    return s0;
  }

  function peg$parsenanInfinity() {
    var s0;

    s0 = peg$parsenan();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenegativeInfinity();
      if (s0 === peg$FAILED) {
        s0 = peg$parsepositiveInfinity();
      }
    }

    return s0;
  }

  function peg$parsenull() {
    var s0;

    if (input.substr(peg$currPos, 4) === peg$c37) {
      s0 = peg$c37;
      peg$currPos += 4;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e41); }
    }
    if (s0 === peg$FAILED) {
      s0 = null;
    }

    return s0;
  }

  function peg$parsesbyte() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsesign();
    if (s1 === peg$FAILED) {
      s1 = null;
    }
    s2 = peg$parseDIGIT();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 === peg$FAILED) {
        s3 = null;
      }
      s4 = peg$parseDIGIT();
      if (s4 === peg$FAILED) {
        s4 = null;
      }
      s1 = [s1, s2, s3, s4];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsesingle() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = peg$parsesign();
    if (s2 !== peg$FAILED) {
      s3 = peg$parseDIGIT();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c21;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseDIGIT();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseDIGIT();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 101) {
              s6 = peg$c26;
              peg$currPos++;
            } else {
              s6 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e30); }
            }
            if (s6 === peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 69) {
                s6 = peg$c27;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e31); }
              }
            }
            if (s6 !== peg$FAILED) {
              s7 = peg$parsesign();
              if (s7 !== peg$FAILED) {
                s8 = [];
                s9 = peg$parseDIGIT();
                if (s9 !== peg$FAILED) {
                  while (s9 !== peg$FAILED) {
                    s8.push(s9);
                    s9 = peg$parseDIGIT();
                  }
                } else {
                  s8 = peg$FAILED;
                }
                if (s8 !== peg$FAILED) {
                  s2 = [s2, s3, s4, s5, s6, s7, s8];
                  s1 = s2;
                } else {
                  peg$currPos = s1;
                  s1 = peg$FAILED;
                }
              } else {
                peg$currPos = s1;
                s1 = peg$FAILED;
              }
            } else {
              peg$currPos = s1;
              s1 = peg$FAILED;
            }
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
    } else {
      peg$currPos = s1;
      s1 = peg$FAILED;
    }
    if (s1 === peg$FAILED) {
      s1 = peg$currPos;
      s2 = peg$parsesign();
      if (s2 !== peg$FAILED) {
        s3 = [];
        s4 = peg$parseDIGIT();
        while (s4 !== peg$FAILED) {
          s3.push(s4);
          s4 = peg$parseDIGIT();
        }
        if (input.charCodeAt(peg$currPos) === 46) {
          s4 = peg$c21;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e25); }
        }
        if (s4 !== peg$FAILED) {
          s5 = [];
          s6 = peg$parseDIGIT();
          if (s6 !== peg$FAILED) {
            while (s6 !== peg$FAILED) {
              s5.push(s6);
              s6 = peg$parseDIGIT();
            }
          } else {
            s5 = peg$FAILED;
          }
          if (s5 !== peg$FAILED) {
            s2 = [s2, s3, s4, s5];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      } else {
        peg$currPos = s1;
        s1 = peg$FAILED;
      }
      if (s1 === peg$FAILED) {
        s1 = peg$currPos;
        s2 = peg$parsesign();
        if (s2 !== peg$FAILED) {
          s3 = [];
          s4 = peg$parseDIGIT();
          if (s4 !== peg$FAILED) {
            while (s4 !== peg$FAILED) {
              s3.push(s4);
              s4 = peg$parseDIGIT();
            }
          } else {
            s3 = peg$FAILED;
          }
          if (s3 !== peg$FAILED) {
            s2 = [s2, s3];
            s1 = s2;
          } else {
            peg$currPos = s1;
            s1 = peg$FAILED;
          }
        } else {
          peg$currPos = s1;
          s1 = peg$FAILED;
        }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 70) {
        s2 = peg$c38;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e42); }
      }
      if (s2 === peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 102) {
          s2 = peg$c39;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e43); }
        }
      }
      if (s2 !== peg$FAILED) {
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsenanInfinity();
      if (s1 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 70) {
          s2 = peg$c38;
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e42); }
        }
        if (s2 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 102) {
            s2 = peg$c39;
            peg$currPos++;
          } else {
            s2 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e43); }
          }
        }
        if (s2 === peg$FAILED) {
          s2 = null;
        }
        s1 = [s1, s2];
        s0 = s1;
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsestring() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parseSQUOTE();
    if (s1 !== peg$FAILED) {
      s2 = peg$parsevalidstring();
      s3 = peg$parseSQUOTE();
      if (s3 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f26(s1, s2, s3);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoneToNine() {
    var s0;

    if (peg$r4.test(input.charAt(peg$currPos))) {
      s0 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e44); }
    }

    return s0;
  }

  function peg$parsezeroToTwelve() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 48) {
      s1 = peg$c15;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e19); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$r4.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e44); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f27(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 49) {
        s1 = peg$c13;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e17); }
      }
      if (s1 !== peg$FAILED) {
        if (peg$r5.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e45); }
        }
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f28(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsezeroToThirteen() {
    var s0;

    s0 = peg$parsezeroToTwelve();
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c40) {
        s0 = peg$c40;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e46); }
      }
    }

    return s0;
  }

  function peg$parsezeroToSixty() {
    var s0, s1, s2;

    if (input.substr(peg$currPos, 2) === peg$c41) {
      s0 = peg$c41;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e47); }
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$r6.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e48); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f29(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsezeroToThirtyOne() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 51) {
      s1 = peg$c42;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e49); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f30(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$r5.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e45); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f31(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsezeroToTwentyFour() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 50) {
      s1 = peg$c43;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e51); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$r8.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e52); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f32(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (peg$r7.test(input.charAt(peg$currPos))) {
        s1 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e50); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseDIGIT();
        if (s2 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f33(s1, s2);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseyear() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseDIGIT();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseDIGIT();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseDIGIT();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseDIGIT();
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f34(s1, s2, s3, s4);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseliterals2() {
    var s0;

    s0 = peg$parseint32();
    if (s0 === peg$FAILED) {
      s0 = peg$parseint64();
      if (s0 === peg$FAILED) {
        s0 = peg$parsenull();
      }
    }

    return s0;
  }

  function peg$parseliterals() {
    var s0;

    s0 = peg$parsenull();

    return s0;
  }

  function peg$parseOPERATOR() {
    var s0;

    if (input.substr(peg$currPos, 2) === peg$c44) {
      s0 = peg$c44;
      peg$currPos += 2;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e53); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c45) {
        s0 = peg$c45;
        peg$currPos += 2;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e54); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 2) === peg$c46) {
          s0 = peg$c46;
          peg$currPos += 2;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e55); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c47) {
            s0 = peg$c47;
            peg$currPos += 2;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e56); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c48) {
              s0 = peg$c48;
              peg$currPos += 2;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e57); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c49) {
                s0 = peg$c49;
                peg$currPos += 2;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e58); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 3) === peg$c50) {
                  s0 = peg$c50;
                  peg$currPos += 3;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e59); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 3) === peg$c51) {
                    s0 = peg$c51;
                    peg$currPos += 3;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e60); }
                  }
                  if (s0 === peg$FAILED) {
                    if (input.substr(peg$currPos, 3) === peg$c52) {
                      s0 = peg$c52;
                      peg$currPos += 3;
                    } else {
                      s0 = peg$FAILED;
                      if (peg$silentFails === 0) { peg$fail(peg$e61); }
                    }
                    if (s0 === peg$FAILED) {
                      if (input.substr(peg$currPos, 3) === peg$c53) {
                        s0 = peg$c53;
                        peg$currPos += 3;
                      } else {
                        s0 = peg$FAILED;
                        if (peg$silentFails === 0) { peg$fail(peg$e62); }
                      }
                      if (s0 === peg$FAILED) {
                        if (input.substr(peg$currPos, 3) === peg$c54) {
                          s0 = peg$c54;
                          peg$currPos += 3;
                        } else {
                          s0 = peg$FAILED;
                          if (peg$silentFails === 0) { peg$fail(peg$e63); }
                        }
                        if (s0 === peg$FAILED) {
                          if (input.substr(peg$currPos, 2) === peg$c55) {
                            s0 = peg$c55;
                            peg$currPos += 2;
                          } else {
                            s0 = peg$FAILED;
                            if (peg$silentFails === 0) { peg$fail(peg$e64); }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsenotOperator() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c56) {
      s0 = peg$c56;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e65); }
    }

    return s0;
  }

  function peg$parseinOperator() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 2) === peg$c55) {
      s1 = peg$c55;
      peg$currPos += 2;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e64); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parsearray();
        if (s3 !== peg$FAILED) {
          s1 = [s1, s2, s3];
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseidentWord() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f35(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseidentCount() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c57) {
      s0 = peg$c57;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }

    return s0;
  }

  function peg$parsepropertyPathSegment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f36(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepropertyPathSegments() {
    var s0, s1, s2;

    s0 = [];
    s1 = peg$parsepropertyPathSegment();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 !== peg$FAILED) {
        s2 = peg$parsepropertyPathSegment();
        if (s2 === peg$FAILED) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
      } else {
        s1 = s2;
      }
    }

    return s0;
  }

  function peg$parsepropertyPath() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPathSegments();
    peg$savedPos = s0;
    s1 = peg$f37(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsepropertyPathArraySeparator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c7;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parsepropertyPathArray() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPath();
    s2 = [];
    s3 = peg$currPos;
    s4 = peg$parsepropertyPathArraySeparator();
    if (s4 !== peg$FAILED) {
      s5 = peg$parsepropertyPath();
      s4 = [s4, s5];
      s3 = s4;
    } else {
      peg$currPos = s3;
      s3 = peg$FAILED;
    }
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$currPos;
      s4 = peg$parsepropertyPathArraySeparator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsepropertyPath();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
    }
    peg$savedPos = s0;
    s0 = peg$f38(s1, s2);

    return s0;
  }

  function peg$parseselectPath() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$parseWILDCARD();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsepropertyPath();
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsepropertyPathArraySeparator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsepropertyPath();
        s4 = [s4, s5];
        s3 = s4;
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsepropertyPathArraySeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsepropertyPath();
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f39(s1, s2);
    }

    return s0;
  }

  function peg$parselogicalConjunctionSegments() {
    var s0, s1, s2, s3, s4, s5;

    s0 = [];
    s1 = peg$parsefilterExpressions();
    while (s1 !== peg$FAILED) {
      s0.push(s1);
      s1 = peg$currPos;
      s2 = peg$currPos;
      s3 = peg$parseWHITESPACE();
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c58) {
          s4 = peg$c58;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c59) {
            s4 = peg$c59;
            peg$currPos += 2;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
        }
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWHITESPACE();
          if (s5 !== peg$FAILED) {
            s3 = [s3, s4, s5];
            s2 = s3;
          } else {
            peg$currPos = s2;
            s2 = peg$FAILED;
          }
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 !== peg$FAILED) {
        s2 = peg$parsefilterExpressions();
        if (s2 === peg$FAILED) {
          peg$currPos = s1;
          s1 = peg$FAILED;
        } else {
          s1 = s2;
        }
      } else {
        s1 = s2;
      }
    }

    return s0;
  }

  function peg$parselogicalConjunction() {
    var s0;

    s0 = peg$parselogicalConjunctionSegments();

    return s0;
  }

  function peg$parsestringLiteral() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestring();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f40(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsearrayArgument() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsearray();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f41(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsebooleanArgument() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseboolean();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f42(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsestringArgument() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsestring();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f43(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsepropertyArgument() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPath();
    peg$savedPos = s0;
    s1 = peg$f44(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsenumberArgument() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsedouble();
    if (s1 === peg$FAILED) {
      s1 = peg$parsedecimal();
      if (s1 === peg$FAILED) {
        s1 = peg$parseint32();
        if (s1 === peg$FAILED) {
          s1 = peg$parseint64();
        }
      }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f45(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseliteralArgument() {
    var s0;

    s0 = peg$parsearrayArgument();
    if (s0 === peg$FAILED) {
      s0 = peg$parsenumberArgument();
      if (s0 === peg$FAILED) {
        s0 = peg$parsebooleanArgument();
        if (s0 === peg$FAILED) {
          s0 = peg$parsestringArgument();
          if (s0 === peg$FAILED) {
            s0 = peg$parsenumberArgument();
          }
        }
      }
    }

    return s0;
  }

  function peg$parsedateTimeFunctions() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c60) {
      s0 = peg$c60;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e70); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 17) === peg$c61) {
        s0 = peg$c61;
        peg$currPos += 17;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e71); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c62) {
          s0 = peg$c62;
          peg$currPos += 4;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e72); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 6) === peg$c63) {
            s0 = peg$c63;
            peg$currPos += 6;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e73); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 5) === peg$c64) {
              s0 = peg$c64;
              peg$currPos += 5;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e74); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 3) === peg$c65) {
                s0 = peg$c65;
                peg$currPos += 3;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e75); }
              }
              if (s0 === peg$FAILED) {
                if (input.substr(peg$currPos, 6) === peg$c66) {
                  s0 = peg$c66;
                  peg$currPos += 6;
                } else {
                  s0 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e76); }
                }
                if (s0 === peg$FAILED) {
                  if (input.substr(peg$currPos, 4) === peg$c67) {
                    s0 = peg$c67;
                    peg$currPos += 4;
                  } else {
                    s0 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e77); }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsemathFunctions() {
    var s0;

    if (input.substr(peg$currPos, 7) === peg$c68) {
      s0 = peg$c68;
      peg$currPos += 7;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e78); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 5) === peg$c69) {
        s0 = peg$c69;
        peg$currPos += 5;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e79); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c70) {
          s0 = peg$c70;
          peg$currPos += 5;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e80); }
        }
      }
    }

    return s0;
  }

  function peg$parsestringFunctions() {
    var s0;

    if (input.substr(peg$currPos, 9) === peg$c71) {
      s0 = peg$c71;
      peg$currPos += 9;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e81); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c72) {
        s0 = peg$c72;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e82); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c73) {
          s0 = peg$c73;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e83); }
        }
      }
    }

    return s0;
  }

  function peg$parsenoArgFunctions() {
    var s0;

    if (input.substr(peg$currPos, 3) === peg$c65) {
      s0 = peg$c65;
      peg$currPos += 3;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e75); }
    }

    return s0;
  }

  function peg$parsenoArgFunction() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parsenoArgFunctions();
    if (s1 !== peg$FAILED) {
      if (input.substr(peg$currPos, 2) === peg$c74) {
        s2 = peg$c74;
        peg$currPos += 2;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e84); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f46(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseoneArgFunctions() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c75) {
      s0 = peg$c75;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e85); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 7) === peg$c73) {
        s0 = peg$c73;
        peg$currPos += 7;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e83); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 7) === peg$c72) {
          s0 = peg$c72;
          peg$currPos += 7;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e82); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c76) {
            s0 = peg$c76;
            peg$currPos += 4;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e86); }
          }
          if (s0 === peg$FAILED) {
            s0 = peg$parsedateTimeFunctions();
          }
        }
      }
    }

    return s0;
  }

  function peg$parseoneArgFunction() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseoneArgFunctions();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoneArgFunction();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetwoArgsFunction();
          if (s3 === peg$FAILED) {
            s3 = peg$parsepropertyArgument();
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f47(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsetwoArgsFunctions() {
    var s0;

    if (input.substr(peg$currPos, 6) === peg$c77) {
      s0 = peg$c77;
      peg$currPos += 6;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e87); }
    }
    if (s0 === peg$FAILED) {
      if (input.substr(peg$currPos, 8) === peg$c78) {
        s0 = peg$c78;
        peg$currPos += 8;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e88); }
      }
      if (s0 === peg$FAILED) {
        if (input.substr(peg$currPos, 8) === peg$c79) {
          s0 = peg$c79;
          peg$currPos += 8;
        } else {
          s0 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e89); }
        }
        if (s0 === peg$FAILED) {
          if (input.substr(peg$currPos, 7) === peg$c80) {
            s0 = peg$c80;
            peg$currPos += 7;
          } else {
            s0 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e90); }
          }
          if (s0 === peg$FAILED) {
            if (input.substr(peg$currPos, 10) === peg$c81) {
              s0 = peg$c81;
              peg$currPos += 10;
            } else {
              s0 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e91); }
            }
            if (s0 === peg$FAILED) {
              if (input.substr(peg$currPos, 9) === peg$c71) {
                s0 = peg$c71;
                peg$currPos += 9;
              } else {
                s0 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e81); }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsetwoArgsFunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsetwoArgsFunctions();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parseoneArgFunction();
        if (s3 === peg$FAILED) {
          s3 = peg$parsetwoArgsFunction();
          if (s3 === peg$FAILED) {
            s3 = peg$parsepropertyArgument();
          }
        }
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c7;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseliteralArgument();
            if (s5 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s6 = peg$c9;
                peg$currPos++;
              } else {
                s6 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e13); }
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f48(s1, s3, s5);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 10) === peg$c82) {
        s1 = peg$c82;
        peg$currPos += 10;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e92); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsepropertyArgument();
        if (input.charCodeAt(peg$currPos) === 44) {
          s3 = peg$c7;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e11); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseliteralArgument();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 44) {
              s5 = peg$c7;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e11); }
            }
            if (s5 !== peg$FAILED) {
              s6 = peg$parseliteralArgument();
              if (s6 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s7 = peg$c9;
                  peg$currPos++;
                } else {
                  s7 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s7 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f49(s2, s4, s6);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselambda() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      if (peg$r10.test(input.charAt(peg$currPos))) {
        s2 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e93); }
      }
      if (s2 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 58) {
          s3 = peg$c20;
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e24); }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 !== peg$FAILED) {
            if (input.charCodeAt(peg$currPos) === 41) {
              s5 = peg$c9;
              peg$currPos++;
            } else {
              s5 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e13); }
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f50(s2);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterLogicalConjunction() {
    var s0, s1, s2, s3, s4, s5, s6, s7;

    s0 = peg$currPos;
    s1 = peg$parsefilterLeft();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c58) {
          s3 = peg$c58;
          peg$currPos += 3;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e68); }
        }
        if (s3 === peg$FAILED) {
          if (input.substr(peg$currPos, 2) === peg$c59) {
            s3 = peg$c59;
            peg$currPos += 2;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e69); }
          }
        }
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parsefilterLeft();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f51(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 40) {
        s1 = peg$c8;
        peg$currPos++;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parsefilterProperty();
        if (s2 !== peg$FAILED) {
          s3 = peg$parseWHITESPACE();
          if (s3 !== peg$FAILED) {
            if (input.substr(peg$currPos, 3) === peg$c58) {
              s4 = peg$c58;
              peg$currPos += 3;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e68); }
            }
            if (s4 === peg$FAILED) {
              if (input.substr(peg$currPos, 2) === peg$c59) {
                s4 = peg$c59;
                peg$currPos += 2;
              } else {
                s4 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$e69); }
              }
            }
            if (s4 !== peg$FAILED) {
              s5 = peg$parseWHITESPACE();
              if (s5 !== peg$FAILED) {
                s6 = peg$parsefilterProperty();
                if (s6 !== peg$FAILED) {
                  if (input.charCodeAt(peg$currPos) === 41) {
                    s7 = peg$c9;
                    peg$currPos++;
                  } else {
                    s7 = peg$FAILED;
                    if (peg$silentFails === 0) { peg$fail(peg$e13); }
                  }
                  if (s7 !== peg$FAILED) {
                    peg$savedPos = s0;
                    s0 = peg$f52(s2, s4, s6);
                  } else {
                    peg$currPos = s0;
                    s0 = peg$FAILED;
                  }
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parselambdaOperator() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 3) === peg$c83) {
      s1 = peg$c83;
      peg$currPos += 3;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e94); }
    }
    if (s1 === peg$FAILED) {
      if (input.substr(peg$currPos, 3) === peg$c84) {
        s1 = peg$c84;
        peg$currPos += 3;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e95); }
      }
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 40) {
        s2 = peg$c8;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e12); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsefilterExpressions();
        if (s3 !== peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 41) {
            s4 = peg$c9;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e13); }
          }
          if (s4 !== peg$FAILED) {
            peg$savedPos = s0;
            s0 = peg$f53(s1, s3);
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselambdaSegment() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r9.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e66); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r9.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e66); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 47) {
        s2 = peg$c0;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f54(s1);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parselambdaSegments() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$currPos;
    s2 = [];
    s3 = peg$parselambdaSegment();
    while (s3 !== peg$FAILED) {
      s2.push(s3);
      s3 = peg$parselambdaSegment();
    }
    if (s2.length < 2) {
      peg$currPos = s1;
      s1 = peg$FAILED;
    } else {
      s1 = s2;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f55(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsefilterLambda() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = peg$parselambdaSegments();
    if (s1 !== peg$FAILED) {
      s2 = peg$parselambdaOperator();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f56(s1, s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterProperty() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefilterLeft();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPERATOR();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseliterals();
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f57(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterEntityCount() {
    var s0, s1, s2, s3, s4, s5, s6;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPathSegments();
    if (input.substr(peg$currPos, 7) === peg$c85) {
      s2 = peg$c85;
      peg$currPos += 7;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e96); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseWHITESPACE();
      if (s3 !== peg$FAILED) {
        s4 = peg$parseOPERATOR();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseWHITESPACE();
          if (s5 !== peg$FAILED) {
            s6 = peg$parseliteralArgument();
            if (s6 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f58(s1, s4, s6);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterLeft() {
    var s0;

    s0 = peg$parsenoArgFunction();
    if (s0 === peg$FAILED) {
      s0 = peg$parseoneArgFunction();
      if (s0 === peg$FAILED) {
        s0 = peg$parsetwoArgsFunction();
        if (s0 === peg$FAILED) {
          s0 = peg$parsepropertyArgument();
        }
      }
    }

    return s0;
  }

  function peg$parsefilterAndOr() {
    var s0, s1, s2, s3, s4, s5, s6, s7, s8;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 40) {
      s1 = peg$c8;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefilterCondition();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseWHITESPACE();
        if (s3 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c58) {
            s4 = peg$c58;
            peg$currPos += 3;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
          if (s4 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c59) {
              s4 = peg$c59;
              peg$currPos += 2;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e69); }
            }
          }
          if (s4 !== peg$FAILED) {
            s5 = peg$parseWHITESPACE();
            if (s5 !== peg$FAILED) {
              s6 = peg$currPos;
              s7 = peg$parsenotOperator();
              if (s7 !== peg$FAILED) {
                s8 = peg$parseWHITESPACE();
                if (s8 !== peg$FAILED) {
                  s7 = [s7, s8];
                  s6 = s7;
                } else {
                  peg$currPos = s6;
                  s6 = peg$FAILED;
                }
              } else {
                peg$currPos = s6;
                s6 = peg$FAILED;
              }
              if (s6 === peg$FAILED) {
                s6 = null;
              }
              s7 = peg$parsefilterCondition();
              if (s7 !== peg$FAILED) {
                if (input.charCodeAt(peg$currPos) === 41) {
                  s8 = peg$c9;
                  peg$currPos++;
                } else {
                  s8 = peg$FAILED;
                  if (peg$silentFails === 0) { peg$fail(peg$e13); }
                }
                if (s8 !== peg$FAILED) {
                  peg$savedPos = s0;
                  s0 = peg$f59(s2, s4, s6, s7);
                } else {
                  peg$currPos = s0;
                  s0 = peg$FAILED;
                }
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsefilterCondition();
      if (s1 !== peg$FAILED) {
        s2 = peg$parseWHITESPACE();
        if (s2 !== peg$FAILED) {
          if (input.substr(peg$currPos, 3) === peg$c58) {
            s3 = peg$c58;
            peg$currPos += 3;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e68); }
          }
          if (s3 === peg$FAILED) {
            if (input.substr(peg$currPos, 2) === peg$c59) {
              s3 = peg$c59;
              peg$currPos += 2;
            } else {
              s3 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e69); }
            }
          }
          if (s3 !== peg$FAILED) {
            s4 = peg$parseWHITESPACE();
            if (s4 !== peg$FAILED) {
              s5 = peg$currPos;
              s6 = peg$parsenotOperator();
              if (s6 !== peg$FAILED) {
                s7 = peg$parseWHITESPACE();
                if (s7 !== peg$FAILED) {
                  s6 = [s6, s7];
                  s5 = s6;
                } else {
                  peg$currPos = s5;
                  s5 = peg$FAILED;
                }
              } else {
                peg$currPos = s5;
                s5 = peg$FAILED;
              }
              if (s5 === peg$FAILED) {
                s5 = null;
              }
              s6 = peg$parsefilterAndOr();
              if (s6 === peg$FAILED) {
                s6 = peg$parsefilterCondition();
              }
              if (s6 !== peg$FAILED) {
                peg$savedPos = s0;
                s0 = peg$f60(s1, s3, s5, s6);
              } else {
                peg$currPos = s0;
                s0 = peg$FAILED;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsefilterCondition() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsefilterLeft();
    if (s1 !== peg$FAILED) {
      s2 = peg$parseWHITESPACE();
      if (s2 !== peg$FAILED) {
        s3 = peg$parseOPERATOR();
        if (s3 !== peg$FAILED) {
          s4 = peg$parseWHITESPACE();
          if (s4 !== peg$FAILED) {
            s5 = peg$parseliteralArgument();
            if (s5 === peg$FAILED) {
              s5 = peg$parsefilterLambda();
            }
            if (s5 !== peg$FAILED) {
              peg$savedPos = s0;
              s0 = peg$f61(s1, s3, s5);
            } else {
              peg$currPos = s0;
              s0 = peg$FAILED;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$FAILED;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsefilterExpressions() {
    var s0;

    s0 = peg$parsefilterAndOr();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefilterCondition();
      if (s0 === peg$FAILED) {
        s0 = peg$parsefilterEntityCount();
        if (s0 === peg$FAILED) {
          s0 = peg$parsefilterLambda();
          if (s0 === peg$FAILED) {
            s0 = peg$parsefilterAndOr();
            if (s0 === peg$FAILED) {
              s0 = peg$parsefilterProperty();
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsefilter() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c86) {
      s1 = peg$c86;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e97); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parsefilterExpressions();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f62(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsenavigationPathSegments() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = [];
    s2 = peg$parsepropertyPathSegment();
    while (s2 !== peg$FAILED) {
      s1.push(s2);
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 47) {
        s3 = peg$c0;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e2); }
      }
      if (s3 !== peg$FAILED) {
        s3 = peg$parsepropertyPathSegment();
        if (s3 === peg$FAILED) {
          peg$currPos = s2;
          s2 = peg$FAILED;
        } else {
          s2 = s3;
        }
      } else {
        s2 = s3;
      }
    }
    if (s1.length < 2) {
      peg$currPos = s0;
      s0 = peg$FAILED;
    } else {
      s0 = s1;
    }

    return s0;
  }

  function peg$parsenavigationPath() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPathSegments();
    peg$savedPos = s0;
    s1 = peg$f63(s1);
    s0 = s1;

    return s0;
  }

  function peg$parsenavigationPathFilter() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPathSegments();
    if (input.substr(peg$currPos, 9) === peg$c87) {
      s2 = peg$c87;
      peg$currPos += 9;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e98); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parsefilterExpressions();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f64(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpandPropertyPath() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPathSegments();
    peg$savedPos = s0;
    s1 = peg$f65(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseexpandEntity() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parseexpandPropertyPath();
    peg$savedPos = s0;
    s1 = peg$f66(s1);
    s0 = s1;

    return s0;
  }

  function peg$parseexpandEntityWithOptions() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseexpandPropertyPath();
    if (input.charCodeAt(peg$currPos) === 40) {
      s2 = peg$c8;
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e12); }
    }
    if (s2 !== peg$FAILED) {
      s3 = peg$parseexpandEntityOptions();
      if (s3 !== peg$FAILED) {
        if (input.charCodeAt(peg$currPos) === 41) {
          s4 = peg$c9;
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e13); }
        }
        if (s4 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f67(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpandOptionExpand() {
    var s0;

    s0 = peg$parseexpand();

    return s0;
  }

  function peg$parseexpandOptionFilter() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsefilter();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f68(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseexpandEntityOptions() {
    var s0, s1;

    s0 = peg$parseexpandOptionFilter();
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parseexpandOptionExpand();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f69(s1);
      }
      s0 = s1;
      if (s0 === peg$FAILED) {
        s0 = peg$parsenavigationPath();
      }
    }

    return s0;
  }

  function peg$parseexpandEntityOptionsSeparator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c88;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseexpandEntityOptionsArray() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parseexpandEntity();
    s2 = peg$currPos;
    s3 = peg$parseexpandEntityOptionsSeparator();
    if (s3 !== peg$FAILED) {
      s4 = peg$parseexpandEntityOptions();
      if (s4 !== peg$FAILED) {
        s3 = [s3, s4];
        s2 = s3;
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
    } else {
      peg$currPos = s2;
      s2 = peg$FAILED;
    }
    if (s2 !== peg$FAILED) {
      s1 = [s1, s2];
      s0 = s1;
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpandOptions() {
    var s0;

    s0 = peg$parseexpandEntityWithOptions();
    if (s0 === peg$FAILED) {
      s0 = peg$parseexpandEntity();
    }

    return s0;
  }

  function peg$parseexpandArraySeparator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 44) {
      s0 = peg$c7;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e11); }
    }

    return s0;
  }

  function peg$parseexpandArray() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseexpandOptions();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseexpandArraySeparator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseexpandOptions();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseexpandArraySeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseexpandOptions();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f70(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseexpand() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c89) {
      s1 = peg$c89;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e100); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseexpandArray();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f71(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorderbySegment() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = peg$parsepropertyPathSegment();
    if (s1 !== peg$FAILED) {
      s2 = peg$currPos;
      if (input.charCodeAt(peg$currPos) === 32) {
        s3 = peg$c3;
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e5); }
      }
      if (s3 !== peg$FAILED) {
        if (input.substr(peg$currPos, 3) === peg$c90) {
          s4 = peg$c90;
          peg$currPos += 3;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e101); }
        }
        if (s4 === peg$FAILED) {
          if (input.substr(peg$currPos, 4) === peg$c91) {
            s4 = peg$c91;
            peg$currPos += 4;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e102); }
          }
        }
        if (s4 !== peg$FAILED) {
          s3 = [s3, s4];
          s2 = s3;
        } else {
          peg$currPos = s2;
          s2 = peg$FAILED;
        }
      } else {
        peg$currPos = s2;
        s2 = peg$FAILED;
      }
      if (s2 === peg$FAILED) {
        s2 = null;
      }
      peg$savedPos = s0;
      s0 = peg$f72(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseorderby() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 9) === peg$c92) {
      s1 = peg$c92;
      peg$currPos += 9;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e103); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$parseorderbySegment();
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        if (input.substr(peg$currPos, 2) === peg$c6) {
          s4 = peg$c6;
          peg$currPos += 2;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e10); }
        }
        if (s4 === peg$FAILED) {
          if (input.charCodeAt(peg$currPos) === 44) {
            s4 = peg$c7;
            peg$currPos++;
          } else {
            s4 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e11); }
          }
        }
        if (s4 !== peg$FAILED) {
          s4 = peg$parseorderbySegment();
          if (s4 === peg$FAILED) {
            peg$currPos = s3;
            s3 = peg$FAILED;
          } else {
            s3 = s4;
          }
        } else {
          s3 = s4;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f73(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecount() {
    var s0, s1;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c57) {
      s1 = peg$c57;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e67); }
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f74();
    }
    s0 = s1;

    return s0;
  }

  function peg$parseformatOptionSeparator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 59) {
      s0 = peg$c88;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e99); }
    }

    return s0;
  }

  function peg$parseformatOption() {
    var s0, s1, s2;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r11.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e104); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r11.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e104); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f75(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parseformatArray() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parseformatOption();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parseformatOptionSeparator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parseformatOption();
        if (s5 !== peg$FAILED) {
          s4 = [s4, s5];
          s3 = s4;
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parseformatOptionSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parseformatOption();
          if (s5 !== peg$FAILED) {
            s4 = [s4, s5];
            s3 = s4;
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f76(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseformat() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c93) {
      s1 = peg$c93;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e105); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseformatArray();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f77(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseselect() {
    var s0, s1, s2;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 8) === peg$c94) {
      s1 = peg$c94;
      peg$currPos += 8;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e106); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseselectPath();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f78(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parseskip() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 6) === peg$c95) {
      s1 = peg$c95;
      peg$currPos += 6;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e107); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINT();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f79(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c96) {
        s1 = peg$c96;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e108); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e109); }
          }
        }
        peg$savedPos = s0;
        s0 = peg$f80();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parsetop() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.substr(peg$currPos, 5) === peg$c97) {
      s1 = peg$c97;
      peg$currPos += 5;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e110); }
    }
    if (s1 !== peg$FAILED) {
      s2 = peg$parseINT();
      if (s2 !== peg$FAILED) {
        peg$savedPos = s0;
        s0 = peg$f81(s2);
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 5) === peg$c97) {
        s1 = peg$c97;
        peg$currPos += 5;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e110); }
      }
      if (s1 !== peg$FAILED) {
        s2 = [];
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
        while (s3 !== peg$FAILED) {
          s2.push(s3);
          if (input.length > peg$currPos) {
            s3 = input.charAt(peg$currPos);
            peg$currPos++;
          } else {
            s3 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$e109); }
          }
        }
        peg$savedPos = s0;
        s0 = peg$f82();
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    }

    return s0;
  }

  function peg$parseunsupported() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    if (input.charCodeAt(peg$currPos) === 36) {
      s1 = peg$c98;
      peg$currPos++;
    } else {
      s1 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e111); }
    }
    if (s1 !== peg$FAILED) {
      s2 = [];
      if (input.length > peg$currPos) {
        s3 = input.charAt(peg$currPos);
        peg$currPos++;
      } else {
        s3 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e109); }
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        if (input.length > peg$currPos) {
          s3 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s3 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e109); }
        }
      }
      peg$savedPos = s0;
      s0 = peg$f83(s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecustomSeparator() {
    var s0;

    if (input.charCodeAt(peg$currPos) === 38) {
      s0 = peg$c99;
      peg$currPos++;
    } else {
      s0 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e112); }
    }

    return s0;
  }

  function peg$parsecustomValue() {
    var s0, s1, s2, s3, s4;

    s0 = peg$currPos;
    s1 = [];
    if (peg$r12.test(input.charAt(peg$currPos))) {
      s2 = input.charAt(peg$currPos);
      peg$currPos++;
    } else {
      s2 = peg$FAILED;
      if (peg$silentFails === 0) { peg$fail(peg$e113); }
    }
    if (s2 !== peg$FAILED) {
      while (s2 !== peg$FAILED) {
        s1.push(s2);
        if (peg$r12.test(input.charAt(peg$currPos))) {
          s2 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e113); }
        }
      }
    } else {
      s1 = peg$FAILED;
    }
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 61) {
        s2 = peg$c100;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e114); }
      }
      if (s2 !== peg$FAILED) {
        s3 = [];
        if (peg$r12.test(input.charAt(peg$currPos))) {
          s4 = input.charAt(peg$currPos);
          peg$currPos++;
        } else {
          s4 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$e113); }
        }
        if (s4 !== peg$FAILED) {
          while (s4 !== peg$FAILED) {
            s3.push(s4);
            if (peg$r12.test(input.charAt(peg$currPos))) {
              s4 = input.charAt(peg$currPos);
              peg$currPos++;
            } else {
              s4 = peg$FAILED;
              if (peg$silentFails === 0) { peg$fail(peg$e113); }
            }
          }
        } else {
          s3 = peg$FAILED;
        }
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f84(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecustomArray() {
    var s0, s1, s2, s3, s4, s5;

    s0 = peg$currPos;
    s1 = peg$parsecustomValue();
    if (s1 !== peg$FAILED) {
      s2 = [];
      s3 = peg$currPos;
      s4 = peg$parsecustomSeparator();
      if (s4 !== peg$FAILED) {
        s5 = peg$parsecustomValue();
        if (s5 !== peg$FAILED) {
          peg$savedPos = s3;
          s3 = peg$f85(s1, s5);
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      } else {
        peg$currPos = s3;
        s3 = peg$FAILED;
      }
      while (s3 !== peg$FAILED) {
        s2.push(s3);
        s3 = peg$currPos;
        s4 = peg$parsecustomSeparator();
        if (s4 !== peg$FAILED) {
          s5 = peg$parsecustomValue();
          if (s5 !== peg$FAILED) {
            peg$savedPos = s3;
            s3 = peg$f85(s1, s5);
          } else {
            peg$currPos = s3;
            s3 = peg$FAILED;
          }
        } else {
          peg$currPos = s3;
          s3 = peg$FAILED;
        }
      }
      peg$savedPos = s0;
      s0 = peg$f86(s1, s2);
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }

    return s0;
  }

  function peg$parsecustom() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsecustomArray();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f87(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsekeyword() {
    var s0;

    s0 = peg$parseexpand();
    if (s0 === peg$FAILED) {
      s0 = peg$parsefilter();
      if (s0 === peg$FAILED) {
        s0 = peg$parseformat();
        if (s0 === peg$FAILED) {
          s0 = peg$parseskip();
          if (s0 === peg$FAILED) {
            s0 = peg$parsetop();
            if (s0 === peg$FAILED) {
              s0 = peg$parseorderby();
              if (s0 === peg$FAILED) {
                s0 = peg$parseselect();
                if (s0 === peg$FAILED) {
                  s0 = peg$parsecount();
                  if (s0 === peg$FAILED) {
                    s0 = peg$parseunsupported();
                    if (s0 === peg$FAILED) {
                      s0 = peg$parsecustom();
                    }
                  }
                }
              }
            }
          }
        }
      }
    }

    return s0;
  }

  function peg$parsekeywords() {
    var s0, s1, s2, s3;

    s0 = peg$currPos;
    s1 = peg$parsekeyword();
    if (s1 !== peg$FAILED) {
      if (input.charCodeAt(peg$currPos) === 38) {
        s2 = peg$c99;
        peg$currPos++;
      } else {
        s2 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$e112); }
      }
      if (s2 !== peg$FAILED) {
        s3 = peg$parsekeywords();
        if (s3 !== peg$FAILED) {
          peg$savedPos = s0;
          s0 = peg$f88(s1, s3);
        } else {
          peg$currPos = s0;
          s0 = peg$FAILED;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$FAILED;
      }
    } else {
      peg$currPos = s0;
      s0 = peg$FAILED;
    }
    if (s0 === peg$FAILED) {
      s0 = peg$currPos;
      s1 = peg$parsekeyword();
      if (s1 !== peg$FAILED) {
        peg$savedPos = s0;
        s1 = peg$f89(s1);
      }
      s0 = s1;
    }

    return s0;
  }

  function peg$parsequery1() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekeywords();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f90(s1);
    }
    s0 = s1;

    return s0;
  }

  function peg$parsequery() {
    var s0, s1;

    s0 = peg$currPos;
    s1 = peg$parsekeywords();
    if (s1 !== peg$FAILED) {
      peg$savedPos = s0;
      s1 = peg$f91(s1);
    }
    s0 = s1;

    return s0;
  }


	function count(item) {
    	return { name: item, type: 'count' }        	
    }
    function conditionLeft(v) {
    	return typeof v === 'object' ? v : { name: v, type: 'property' }
    }
	function literal(item) {
    	return { value: item, type: 'literal' }
    }

  peg$result = peg$startRuleFunction();

  if (peg$result !== peg$FAILED && peg$currPos === input.length) {
    return peg$result;
  } else {
    if (peg$result !== peg$FAILED && peg$currPos < input.length) {
      peg$fail(peg$endExpectation());
    }

    throw peg$buildStructuredError(
      peg$maxFailExpected,
      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
      peg$maxFailPos < input.length
        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
    );
  }
}

module.exports = {
  SyntaxError: peg$SyntaxError,
  parse: peg$parse
};
